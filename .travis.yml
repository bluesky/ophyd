language: python

sudo: required
dist: trusty
env:
  global:
    # Doctr deploy key for NSLS-II/NSLS-II.github.io
    - secure: "jUZbT6RuZCGVKEvBCsK22mvXDvGIN10zlHRqj7Q6cl6lf2KaaXnOKb6azCQRJhbvgi9IUkJzjT3ghqeNhjsWOdxzbX4qzTh6jooySP0nyAY+iOQ/F9Q62RdRwM+N5y/t++1Cv2n5BVAYEnGIrE3SyZbeaYLTvNveJnVdeTIKif4="

addons:
  apt:
    packages:
      - graphviz


services:
  - docker

cache:
  directories:
    - $HOME/.cache/pip

matrix:
  include:
    - python: 3.5
      env: CONDA_ENV=1
    - python: 3.6
      env: BUILD_DOCS=true CONDA_ENV=1
    - python: 3.6
      env: EPICS_DEB_DIST="jessie/staging"
    - python: nightly
      env: EPICS_DEB_DIST="jessie/staging"

before_install:
  - export DOCKER0_IP=$(/sbin/ifconfig docker0 |grep 'inet addr' | sed -e 's/.*addr:\([^ ]*\).*/\1/')
  - export EPICS_CA_ADDR_LIST=$( echo $DOCKER0_IP | sed -e 's/^\([0-9]\+\)\.\([0-9]\+\)\..*$/\1.\2.255.255/' )
  - export EPICS_CA_AUTO_ADDR_LIST="no"
  - export EPICS_CA_MAX_ARRAY_BYTES=10000000
  - export DOCKERIMAGE="klauer/epics-docker"
  - export EPICS_BASE=/usr/lib/epics
  - export PE_DOCKERIMAGE="klauer/simioc-docker"
  - export PE_DOCKERTAG="pyepics-docker"
  - export MPLBACKEND=agg
  - mkdir /tmp/data
  - perl --version
  - git fetch --unshallow
  - docker pull ${DOCKERIMAGE}
  - docker pull ${PE_DOCKERIMAGE}:${PE_DOCKERTAG}
  - docker images
  - docker run -d -p $DOCKER0_IP:7000-9000:5064/tcp -v /tmp/data:/data ${DOCKERIMAGE}
  - docker run -d -p $DOCKER0_IP:7000-9000:5064/tcp ${PE_DOCKERIMAGE}:${PE_DOCKERTAG}
  - docker ps -a
  - ip addr

  - |
    if [ $CONDA_ENV ]; then
       wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
       chmod +x miniconda.sh
       ./miniconda.sh -b -p /home/travis/mc
       export PATH=/home/travis/mc/bin:$PATH
       conda config --set show_channel_urls True
       conda config --set always_yes True
    fi

install:
  - |
    if [ $CONDA_ENV ]; then
       conda create -n testenv python=$TRAVIS_PYTHON_VERSION numpy pyepics databroker networkx -c lightsource2-tag -c conda-forge -c soft-matter -c defaults --override-channels
       source activate testenv
       export PYEPICS_LIBCA=$CONDA_PREFIX/lib/libca.so
       conda install readline -c lightsource2-tag
    else
       sudo -E bash install_epics_on_travis.sh
       python -mpip install -r requirements.txt
    fi
  - python -mpip install -r test-requirements.txt
  - python -mpip install git+git://github.com/NSLS-II/caproto.git@fix-char || echo 'caproto did not install'
  - pip install -e .
  # set up directories we will need
  - python -c "import ophyd.utils.paths as oup; import datetime; now = datetime.datetime.now(); [oup.make_dir_tree(now.year + j, base_path='/tmp/data') for j in [-1, 0, 1]]"
  # setup some path environment variables for epics
  - export PATH=$PATH:$EPICS_BASE/bin/$EPICS_HOST_ARCH
  - export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$EPICS_BASE/lib/$EPICS_HOST_ARCH"
  - echo "PATH=$PATH"
  - echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"

script:
  - echo "Checking if the motor IOC is running:"
  - caget XF:31IDA-OP{Tbl-Ax:X1}Mtr
  - echo "Checking if the areaDetector IOC is running:"
  - caget XF:31IDA-BI{Cam:Tbl}ROI1:ArrayCounter

  # check pyepics
  # - export PYEPICS_LIBCA=$EPICS_BASE/lib/$EPICS_HOST_ARCH/libca.so
  - python -c "import epics; print(epics.__version__)"
  - python -c "import epics.ca; print(epics.ca.find_libca())"
  - python -c "import epics; print(epics.caget('XF:31IDA-OP{Tbl-Ax:X1}Mtr'))"


  # list packages
  - |
    if [ $CONDA_ENV ]; then
        conda list
    fi
  # running tests
  - python run_tests.py -v --cov=ophyd --cov-report term-missing

  - set -e
  # Build docs.
  - |
    if [ $BUILD_DOCS ]; then
      pip install -r docs-requirements.txt
      pushd doc
      make html
      popd
      # Publish docs.
      doctr deploy --deploy-repo NSLS-II/NSLS-II.github.io --deploy-branch-name master ophyd
    fi
